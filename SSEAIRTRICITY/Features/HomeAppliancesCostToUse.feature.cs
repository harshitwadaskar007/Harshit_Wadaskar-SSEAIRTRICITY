// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SSEAIRTRICITY.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Home Appliances Cost To Use")]
    public partial class HomeAppliancesCostToUseFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "HomeAppliancesCostToUse.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Home Appliances Cost To Use", "As a cost-conscious consumer\r\nI want to compare the cost of using different home " +
                    "electrical appliances\r\nSo that I can make informed decisions about my energy con" +
                    "sumption. So the\r\nfeature includes a comparison of the cost of using electrical " +
                    "appliances", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 8
#line hidden
#line 9
 testRunner.Given("I navigate to electrical appliances cost compare website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get cost of using electrical appliances for England")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("England", "34", "day", null)]
        public virtual void GetCostOfUsingElectricalAppliancesForEngland(string country, string averageRate, string duration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("country", country);
            argumentsOfScenario.Add("average rate", averageRate);
            argumentsOfScenario.Add("duration", duration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get cost of using electrical appliances for England", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 13
 testRunner.When(string.Format("I am a resident from \'{0}\'", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Appliances",
                            "Hours",
                            "Minutes"});
                table1.AddRow(new string[] {
                            "Dishwasher",
                            "2",
                            "30"});
                table1.AddRow(new string[] {
                            "Iron",
                            "1",
                            "45"});
                table1.AddRow(new string[] {
                            "Slow cooker",
                            "1",
                            "10"});
                table1.AddRow(new string[] {
                            "Immersion heater",
                            "2",
                            "20"});
                table1.AddRow(new string[] {
                            "Vacuum cleaner",
                            "3",
                            "40"});
                table1.AddRow(new string[] {
                            "Broadband router",
                            "23",
                            "50"});
                table1.AddRow(new string[] {
                            "Games console",
                            "2",
                            "20"});
                table1.AddRow(new string[] {
                            "Towel rail",
                            "9",
                            "20"});
#line 14
 testRunner.And(string.Format("I add the list of appliances and its average usage and the average rate is \'{0}\' " +
                            "for \'{1}\'", averageRate, duration), ((string)(null)), table1, "And ");
#line hidden
#line 24
 testRunner.Then("I should get the results table with daily, weekly, monthly, and yearly cost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get cost of using electrical appliances for Scotland")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("Scotland", "67", "day", null)]
        public virtual void GetCostOfUsingElectricalAppliancesForScotland(string country, string averageRate, string duration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("country", country);
            argumentsOfScenario.Add("average rate", averageRate);
            argumentsOfScenario.Add("duration", duration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get cost of using electrical appliances for Scotland", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 31
 testRunner.When(string.Format("I am a resident from \'{0}\'", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Appliances",
                            "Hours",
                            "Minutes"});
                table2.AddRow(new string[] {
                            "Kettle",
                            "1",
                            "30"});
                table2.AddRow(new string[] {
                            "Microwave",
                            "1",
                            "10"});
                table2.AddRow(new string[] {
                            "Electric blanket",
                            "6",
                            "10"});
                table2.AddRow(new string[] {
                            "Toaster",
                            "1",
                            "15"});
                table2.AddRow(new string[] {
                            "Vacuum cleaner",
                            "3",
                            "15"});
                table2.AddRow(new string[] {
                            "Games console",
                            "5",
                            "15"});
                table2.AddRow(new string[] {
                            "Dishwasher",
                            "2",
                            "30"});
                table2.AddRow(new string[] {
                            "Towel rail",
                            "1",
                            "30"});
                table2.AddRow(new string[] {
                            "Fan heater",
                            "7",
                            "30"});
                table2.AddRow(new string[] {
                            "Hairdryer",
                            "0",
                            "10"});
#line 32
 testRunner.And(string.Format("I add the list of appliances and its average usage and the average rate is \'{0}\' " +
                            "for \'{1}\'", averageRate, duration), ((string)(null)), table2, "And ");
#line hidden
#line 44
 testRunner.Then("I should get the results table with daily, weekly, monthly, and yearly cost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get cost of using electrical appliances for Wales")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("Wales", "67", "day", null)]
        public virtual void GetCostOfUsingElectricalAppliancesForWales(string country, string averageRate, string duration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("country", country);
            argumentsOfScenario.Add("average rate", averageRate);
            argumentsOfScenario.Add("duration", duration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get cost of using electrical appliances for Wales", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 51
 testRunner.When(string.Format("I am a resident from \'{0}\'", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Appliances",
                            "Hours",
                            "Minutes"});
                table3.AddRow(new string[] {
                            "Dishwasher",
                            "2",
                            "30"});
                table3.AddRow(new string[] {
                            "Iron",
                            "1",
                            "45"});
                table3.AddRow(new string[] {
                            "Slow cooker",
                            "1",
                            "10"});
                table3.AddRow(new string[] {
                            "Immersion heater",
                            "2",
                            "20"});
                table3.AddRow(new string[] {
                            "Vacuum cleaner",
                            "3",
                            "40"});
#line 52
 testRunner.And(string.Format("I add the list of appliances and its average usage and the average rate is \'{0}\' " +
                            "for \'{1}\'", averageRate, duration), ((string)(null)), table3, "And ");
#line hidden
#line 59
 testRunner.Then("I should get the results table with daily, weekly, monthly, and yearly cost", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Get cost of using electrical appliances for Northern Ireland")]
        [NUnit.Framework.CategoryAttribute("Smoke")]
        [NUnit.Framework.TestCaseAttribute("Northern Ireland", "The advice on this website doesn’t cover Northern Ireland", null)]
        public virtual void GetCostOfUsingElectricalAppliancesForNorthernIreland(string country, string errorMessage, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Smoke"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("country", country);
            argumentsOfScenario.Add("error message", errorMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Get cost of using electrical appliances for Northern Ireland", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
this.FeatureBackground();
#line hidden
#line 66
 testRunner.When(string.Format("I am a resident from \'{0}\'", country), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then(string.Format("I should get the results message as \'{0}\'", errorMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
